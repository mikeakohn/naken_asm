#!/usr/bin/env bash

CC=gcc
COMPILER_PREFIX=
DEBUG=
CFLAGS="-Wall"
FLAGS=""
LDFLAGS=""
LDFLAGS_UTIL=""
DFLAGS=""
CONFIG_EXT=""
INSTALL_PREFIX="/usr/local"
INSTALL_BIN=
INSTALL_INCLUDES=
INCLUDE_PATH=
ASM_OBJS_ALL=""
DISASM_OBJS_ALL=""
TABLE_OBJS_ALL=""
SIM_OBJS_ALL=""
CPUS=" \
  1802
  4004
  6502
  6800
  6809
  65816
  68HC08
  68000
  8008
  8048
  8051
  86000
  ARC
  ARM
  ARM64
  AVR8
  CELL
  COPPER
  CP1610
  DOTNET
  DSPIC
  EMOTION_ENGINE
  EPIPHANY
  JAVA
  LC3
  M8C
  MIPS
  MSP430
  PADAUK
  PDP8
  PIC14
  POWERPC
  PROPELLER
  PROPELLER2
  RISCV
  SH4
  SPARC
  STM8
  SUPER_FX
  SWEET16
  THUMB
  TMS340
  TMS1000
  TMS9900
  UNSP
  WEBASM
  XTENSA
  Z80"
ASM_OBJS="common.o"
DISASM_OBJS=""
TABLE_OBJS=""
SIM_OBJS="null.o"
COMMON_OBJS="add_bin.o assembler.o cpu_list.o directives.o directives_data.o directives_if.o directives_include.o eval_expression.o eval_expression_ex.o ifdef_expression.o imports_ar.o imports_get_int.o imports_obj.o linker.o print_error.o macros.o memory.o memory_pool.o symbols.o tokens.o var.o"
FILEIO_OBJS="read_amiga.o read_bin.o read_elf.o read_hex.o read_srec.o read_ti_txt.o read_wdc.o write_amiga.o write_bin.o write_elf.o write_hex.o write_srec.o write_wdc.o"
PROG_OBJS="lpc.o serial.o"
NO_MSP430="-DNO_MSP430"

DFLAGS_ALL=""

for cpu in ${CPUS}
do
  DFLAGS_ALL="${DFLAGS_ALL} -DENABLE_${cpu}"
done

DFLAGS_ALL=`echo ${DFLAGS_ALL} | sed 's/^ *//'`

for file in asm/*.c
do
  if [[ ! $(basename ${file})  == "template.c" ]]
  then
    file=${file##*/}
    ASM_OBJS_ALL="${ASM_OBJS_ALL} ${file%.c}.o"
  fi
done

for file in disasm/*.c
do
  if [[ ! $(basename ${file}) == "template.c" ]]
  then
    file=${file##*/}
    DISASM_OBJS_ALL="${DISASM_OBJS_ALL} ${file%.c}.o"
  fi
done

for file in table/*.c
do
  if [[ ! $(basename ${file}) == "template.c" ]]
  then
    file=${file##*/}
    TABLE_OBJS_ALL="${TABLE_OBJS_ALL} ${file%.c}.o"
  fi
done

for file in simulate/*.c
do
  if [[ ! $(basename ${file}) == "template.c" ]]
  then
    file=${file##*/}
    SIM_OBJS_ALL="${SIM_OBJS_ALL} ${file%.c}.o"
  fi
done

targetos=`uname -s`

case $targetos in
MINGW*)
#CFLAGS="${CFLAGS} -DWINDOWS -mwindows"
CONFIG_EXT=".exe"
INSTALL_PREFIX="/c/Program Files/naken_asm"
;;
esac

show_help()
{
  echo
  echo "Usage: ./configure [options]"
  echo
  echo "  --help                    list options"
  echo "  --cflags=CFLAGS           extra compiler flags"
  echo "  --ldflags=LDFLAGS         extra linker flags"
  echo "  --prefix=PATH             base path to install to (${INSTALL_PREFIX})"
  echo "  --include-path=PATH       default: (${INSTALL_PREFIX}/share/naken_asm/includes)"
  echo "  --compiler-prefix=PREFIX  for cross-compilers"
  echo "  --enable-debug            compile in debug code"
  echo "  --enable-1802             compile in support for RCA 1802"
  echo "  --enable-4004             compile in support for 4004/MCS-4"
  echo "  --enable-6502             compile in support for 6502/6510 etc"
  echo "  --enable-65816            compile in support for 65816"
  echo "  --enable-6800             compile in support for 6800"
  echo "  --enable-6809             compile in support for 6809"
  echo "  --enable-68hc08           compile in support for 68hc08 series"
  echo "  --enable-680x0            compile in support for 680x0 series"
  echo "  --enable-8008             compile in support for 8008/MCS-8"
  echo "  --enable-8048             compile in support for 8048/MCS-48/8041"
  echo "  --enable-8051             compile in support for 8051/8052/MCS-51"
  echo "  --enable-86000            compile in support for 86000"
  echo "  --enable-arc              compile in support for ARC"
  echo "  --enable-arm              compile in support for ARM"
  echo "  --enable-arm64            compile in support for ARM64"
  echo "  --enable-avr8             compile in support for Atmel AVR8"
  echo "  --enable-cell             compile in support for Broadband Cell SPU"
  echo "  --enable-copper           compile in support for Amiga Copper"
  echo "  --enable-cp1610           compile in support for CP1610"
  echo "  --enable-dotnet           compile in support for .NET CIL"
  echo "  --enable-dspic            compile in support for dsPIC and PIC24"
  echo "  --enable-epiphany         compile in support for Ephiphany-III/IV"
  echo "  --enable-java             compile in support for Java"
  echo "  --enable-lc3              compile in support for LC-3"
  echo "  --enable-m8c              compile in support for PSoC M8C"
  echo "  --enable-mips             compile in support for MIPS"
  echo "  --enable-msp430           compile in support for MSP430 and MSP430X"
  echo "  --enable-padauk           compile in support for PDK13 to PDK16"
  echo "  --enable-pdp8             compile in support for PDP-8"
  echo "  --enable-pic14            compile in support for PIC14"
  echo "  --enable-powerpc          compile in support for PowerPC"
  echo "  --enable-propeller        compile in support for Propeller"
  echo "  --enable-propeller2       compile in support for Propeller2"
  echo "  --enable-emotion-engine   compile in support for Emotion Engine"
  echo "  --enable-riscv            compile in support for RISCV"
  echo "  --enable-sh4              compile in support for SH4"
  echo "  --enable-sparc            compile in support for SPARC"
  echo "  --enable-stm8             compile in support for STM8"
  echo "  --enable-super-fx         compile in support for Super FX"
  echo "  --enable-sweet16          compile in support for sweet16"
  echo "  --enable-thumb            compile in support for thumb"
  echo "  --enable-tms340           compile in support for tms340"
  echo "  --enable-tms1000          compile in support for tms1000/tms1100"
  echo "  --enable-tms9900          compile in support for tms9900"
  echo "  --enable-unsp             compile in support for SunPlus unSP"
  echo "  --enable-webasm           compile in support for WebAssembly"
  echo "  --enable-xtensa           compile in support for Xtensa"
  echo "  --enable-z80              compile in support for z80"
  echo

  exit
}

test_compiler()
{
  cat >config.c <<EOF
  main() { }
EOF

  ${1} -o config config.c >>config.log 2>&1
}

test_lib()
{
  cat >config.c <<EOF
main() { }
EOF

  ${COMPILER_PREFIX}${CC} -o config config.c $1 ${LDFLAGS} >>config.log 2>&1
}

test_include()
{
  cat >config.c <<EOF
#include <stdio.h>
#include <stdlib.h>
#include <${1}>
int main() { return 0; }
EOF

  ${COMPILER_PREFIX}${CC} -c config.c ${CFLAGS} >>config.log 2>&1
}

test_strip()
{
  cat >config.c <<EOF
int main() { return 0; }
EOF
  a=`${COMPILER_PREFIX}${CC} -o config config.c -s 2>&1 >>config.log | grep 'option -s is obsolete'`
  if [ "${a}" == "" ]
  then
    LDFLAGS="${LDFLAGS} -s"
  fi
}

instr()
{
  for s in $2; do
    case "${s}" in
    *${1}*) return 0
    ;;
    esac
  done

  return 1
}

cleanup()
{
  rm -f config.c
  rm -f config.o
  rm -f config.exe
  rm -f config
  rm -f config.log
}

output_objs()
{
  echo -n "${1}=" >> config.mak
  for file in ${3}
  do
    printf " \\\\\n  ${2}/${file}" >> config.mak
  done
  echo >> config.mak
}

for option in $@; do

  optval="${option#*=}"

  case "$option" in
  --help) show_help
  ;;
  --enable-debug) DEBUG="-DDEBUG -g"
  ;;
  --disable-elf) CFLAGS="${CFLAGS} -DDISABLE_ELF"
  ;;
  --cflags=*) CFLAGS="${CFLAGS} $optval"
  ;;
  --ldflags=*) LDFLAGS="${LDFLAGS} $optval"
  ;;
  --include-path=*) INCLUDE_PATH="$optval"
  ;;
  --compiler-prefix=*) COMPILER_PREFIX="$optval"
  ;;
  --install-prefix=*) INSTALL_PREFIX="$optval"
  ;;
  --prefix=*) INSTALL_PREFIX="$optval"
  ;;
  --enable-1802)
    ASM_OBJS="${ASM_OBJS} 1802.o"
    DISASM_OBJS="${DISASM_OBJS} 1802.o"
    SIM_OBJS="${SIM_OBJS} 1802.o"
    TABLE_OBJS="${TABLE_OBJS} 1802.o"
    DFLAGS="${DFLAGS} -DENABLE_1802"
  ;;
  --enable-4004)
    ASM_OBJS="${ASM_OBJS} 4004.o"
    DISASM_OBJS="${DISASM_OBJS} 4004.o"
    #SIM_OBJS="${SIM_OBJS} 4004.o"
    TABLE_OBJS="${TABLE_OBJS} 4004.o"
    DFLAGS="${DFLAGS} -DENABLE_4004"
  ;;
  --enable-6502)
    ASM_OBJS="${ASM_OBJS} 6502.o"
    DISASM_OBJS="${DISASM_OBJS} 6502.o"
    SIM_OBJS="${SIM_OBJS} 6502.o"
    TABLE_OBJS="${TABLE_OBJS} 6502.o"
    DFLAGS="${DFLAGS} -DENABLE_6502"
  ;;
  --enable-65816)
    ASM_OBJS="${ASM_OBJS} 65816.o"
    DISASM_OBJS="${DISASM_OBJS} 65816.o"
    TABLE_OBJS="${TABLE_OBJS} 65816.o"
    DFLAGS="${DFLAGS} -DENABLE_65816"
  ;;
  --enable-6800)
    ASM_OBJS="${ASM_OBJS} 6800.o"
    DISASM_OBJS="${DISASM_OBJS} 6800.o"
    TABLE_OBJS="${TABLE_OBJS} 6800.o"
    DFLAGS="${DFLAGS} -DENABLE_6800"
  ;;
  --enable-6809)
    ASM_OBJS="${ASM_OBJS} 6809.o"
    DISASM_OBJS="${DISASM_OBJS} 6809.o"
    TABLE_OBJS="${TABLE_OBJS} 6809.o"
    DFLAGS="${DFLAGS} -DENABLE_6809"
  ;;
  --enable-68hc08)
    ASM_OBJS="${ASM_OBJS} 68hc08.o"
    DISASM_OBJS="${DISASM_OBJS} 68hc08.o"
    TABLE_OBJS="${TABLE_OBJS} 68hc08.o"
    DFLAGS="${DFLAGS} -DENABLE_68HC08"
  ;;
  --enable-68000)
    ASM_OBJS="${ASM_OBJS} 68000.o"
    DISASM_OBJS="${DISASM_OBJS} 68000.o"
    TABLE_OBJS="${TABLE_OBJS} 68000.o"
    DFLAGS="${DFLAGS} -DENABLE_68000"
  ;;
  --enable-8008)
    ASM_OBJS="${ASM_OBJS} 8008.o"
    DISASM_OBJS="${DISASM_OBJS} 8008.o"
    SIM_OBJS="${SIM_OBJS} 8008.o"
    TABLE_OBJS="${TABLE_OBJS} 8008.o"
    DFLAGS="${DFLAGS} -DENABLE_8008"
  ;;
  --enable-8048)
    ASM_OBJS="${ASM_OBJS} 8048.o"
    DISASM_OBJS="${DISASM_OBJS} 8048.o"
    TABLE_OBJS="${TABLE_OBJS} 8048.o"
    DFLAGS="${DFLAGS} -DENABLE_8048"
  ;;
  --enable-8051)
    ASM_OBJS="${ASM_OBJS} 8051.o"
    DISASM_OBJS="${DISASM_OBJS} 8051.o"
    TABLE_OBJS="${TABLE_OBJS} 8051.o"
    DFLAGS="${DFLAGS} -DENABLE_8051"
  ;;
  --enable-86000)
    ASM_OBJS="${ASM_OBJS} 86000.o"
    DISASM_OBJS="${DISASM_OBJS} 86000.o"
    TABLE_OBJS="${TABLE_OBJS} 86000.o"
    DFLAGS="${DFLAGS} -DENABLE_86000"
  ;;
  --enable-arc)
    ASM_OBJS="${ASM_OBJS} arc.o"
    DISASM_OBJS="${DISASM_OBJS} arc.o"
    DFLAGS="${DFLAGS} -DENABLE_ARC"
  ;;
  --enable-arm)
    ASM_OBJS="${ASM_OBJS} arm.o"
    DISASM_OBJS="${DISASM_OBJS} arm.o"
    TABLE_OBJS="${TABLE_OBJS} arm.o"
    DFLAGS="${DFLAGS} -DENABLE_ARM"
  ;;
  --enable-arm64)
    ASM_OBJS="${ASM_OBJS} arm64.o"
    DISASM_OBJS="${DISASM_OBJS} arm64.o"
    TABLE_OBJS="${TABLE_OBJS} arm64.o"
    DFLAGS="${DFLAGS} -DENABLE_ARM64"
  ;;
  --enable-avr8)
    ASM_OBJS="${ASM_OBJS} avr8.o"
    DISASM_OBJS="${DISASM_OBJS} avr8.o"
    SIM_OBJS="${SIM_OBJS} avr8.o"
    TABLE_OBJS="${TABLE_OBJS} avr8.o"
    DFLAGS="${DFLAGS} -DENABLE_AVR8"
  ;;
  --enable-cell)
    ASM_OBJS="${ASM_OBJS} cell.o"
    DISASM_OBJS="${DISASM_OBJS} cell.o"
    TABLE_OBJS="${TABLE_OBJS} cell.o"
    DFLAGS="${DFLAGS} -DENABLE_CELL"
  ;;
  --enable-copper)
    ASM_OBJS="${ASM_OBJS} copper.o"
    DISASM_OBJS="${DISASM_OBJS} copper.o"
    #TABLE_OBJS="${TABLE_OBJS} copper.o"
    DFLAGS="${DFLAGS} -DENABLE_COPPER"
  ;;
  --enable-cp1610)
    ASM_OBJS="${ASM_OBJS} cp1610.o"
    DISASM_OBJS="${DISASM_OBJS} cp1610.o"
    TABLE_OBJS="${TABLE_OBJS} cp1610.o"
    DFLAGS="${DFLAGS} -DENABLE_CP1610"
  ;;
  --enable-dotnet)
    ASM_OBJS="${ASM_OBJS} dotnet.o"
    DISASM_OBJS="${DISASM_OBJS} dotnet.o"
    TABLE_OBJS="${TABLE_OBJS} dotnet.o"
    DFLAGS="${DFLAGS} -DENABLE_DOTNET"
  ;;
  --enable-dspic)
    ASM_OBJS="${ASM_OBJS} dspic.o"
    DISASM_OBJS="${DISASM_OBJS} dspic.o"
    TABLE_OBJS="${TABLE_OBJS} dspic.o"
    DFLAGS="${DFLAGS} -DENABLE_DSPIC"
  ;;
  --enable-epiphany)
    ASM_OBJS="${ASM_OBJS} epiphany.o"
    DISASM_OBJS="${DISASM_OBJS} epiphany.o"
    TABLE_OBJS="${TABLE_OBJS} epiphany.o"
    DFLAGS="${DFLAGS} -DENABLE_EPIPHANY"
  ;;
  --enable-java)
    ASM_OBJS="${ASM_OBJS} java.o"
    DISASM_OBJS="${DISASM_OBJS} java.o"
    TABLE_OBJS="${TABLE_OBJS} java.o"
    DFLAGS="${DFLAGS} -DENABLE_JAVA"
  ;;
  --enable-lc3)
    ASM_OBJS="${ASM_OBJS} lc3.o"
    DISASM_OBJS="${DISASM_OBJS} lc3.o"
    TABLE_OBJS="${TABLE_OBJS} lc3.o"
    DFLAGS="${DFLAGS} -DENABLE_LC3"
  ;;
  --enable-m8c)
    ASM_OBJS="${ASM_OBJS} m8c.o"
    DISASM_OBJS="${DISASM_OBJS} m8c.o"
    TABLE_OBJS="${TABLE_OBJS} m8c.o"
    DFLAGS="${DFLAGS} -DENABLE_M8C"
  ;;
  --enable-mips)
    ASM_OBJS="${ASM_OBJS} mips.o"
    DISASM_OBJS="${DISASM_OBJS} mips.o"
    SIM_OBJS="${SIM_OBJS} mips.o"
    TABLE_OBJS="${TABLE_OBJS} mips.o"
    DFLAGS="${DFLAGS} -DENABLE_MIPS"
  ;;
  --enable-msp430)
    ASM_OBJS="${ASM_OBJS} msp430.o"
    DISASM_OBJS="${DISASM_OBJS} msp430.o"
    SIM_OBJS="${SIM_OBJS} msp430.o"
    TABLE_OBJS="${TABLE_OBJS} msp430.o"
    DFLAGS="${DFLAGS} -DENABLE_MSP430"
    NO_MSP430=""
  ;;
  --enable-padauk)
    ASM_OBJS="${ASM_OBJS} pdk13.o pdk14.o pdk15.o pdk16.o pdk_parse.o"
    DISASM_OBJS="${DISASM_OBJS} pdk13.o pdk14.o pdk15.o pdk16.o"
    TABLE_OBJS="${TABLE_OBJS} pdk13.o pdk14.o pdk15.o pdk16.o"
    DFLAGS="${DFLAGS} -DENABLE_PADAUK"
  ;;
  --enable-pdp8)
    ASM_OBJS="${ASM_OBJS} pdp8.o"
    DISASM_OBJS="${DISASM_OBJS} pdp8.o"
    TABLE_OBJS="${TABLE_OBJS} pdp8.o"
    DFLAGS="${DFLAGS} -DENABLE_PDP8"
  ;;
  --enable-pic14)
    ASM_OBJS="${ASM_OBJS} pic14.o"
    DISASM_OBJS="${DISASM_OBJS} pic14.o"
    TABLE_OBJS="${TABLE_OBJS} pic14.o"
    DFLAGS="${DFLAGS} -DENABLE_PIC14"
  ;;
  --enable-powerpc)
    ASM_OBJS="${ASM_OBJS} powerpc.o"
    DISASM_OBJS="${DISASM_OBJS} powerpc.o"
    TABLE_OBJS="${TABLE_OBJS} powerpc.o"
    DFLAGS="${DFLAGS} -DENABLE_POWERPC"
  ;;
  --enable-propeller)
    ASM_OBJS="${ASM_OBJS} propeller.o"
    DISASM_OBJS="${DISASM_OBJS} propeller.o"
    TABLE_OBJS="${TABLE_OBJS} propeller.o"
    DFLAGS="${DFLAGS} -DENABLE_PROPELLER"
  ;;
  --enable-propeller2)
    ASM_OBJS="${ASM_OBJS} propeller2.o"
    DISASM_OBJS="${DISASM_OBJS} propeller2.o"
    TABLE_OBJS="${TABLE_OBJS} propeller2.o"
    DFLAGS="${DFLAGS} -DENABLE_PROPELLER2"
  ;;
  --enable-emotion-engine)
    ASM_OBJS="${ASM_OBJS} ps2_ee_vu.o"
    DISASM_OBJS="${DISASM_OBJS} ps2_ee_vu.o"
    TABLE_OBJS="${TABLE_OBJS} ps2_ee_vu.o"
    DFLAGS="${DFLAGS} -DENABLE_EMOTION_ENGINE"
  ;;
  --enable-riscv)
    ASM_OBJS="${ASM_OBJS} riscv.o"
    DISASM_OBJS="${DISASM_OBJS} riscv.o"
    TABLE_OBJS="${TABLE_OBJS} riscv.o"
    DFLAGS="${DFLAGS} -DENABLE_RISCV"
  ;;
  --enable-sh4)
    ASM_OBJS="${ASM_OBJS} sh4.o"
    DISASM_OBJS="${DISASM_OBJS} sh4.o"
    TABLE_OBJS="${TABLE_OBJS} sh4.o"
    DFLAGS="${DFLAGS} -DENABLE_SH4"
  ;;
  --enable-sparc)
    ASM_OBJS="${ASM_OBJS} sparc.o"
    DISASM_OBJS="${DISASM_OBJS} sparc.o"
    TABLE_OBJS="${TABLE_OBJS} sparc.o"
    DFLAGS="${DFLAGS} -DENABLE_SPARC"
  ;;
  --enable-stm8)
    ASM_OBJS="${ASM_OBJS} stm8.o"
    DISASM_OBJS="${DISASM_OBJS} stm8.o"
    SIM_OBJS="${SIM_OBJS} stm8.o"
    TABLE_OBJS="${TABLE_OBJS} stm8.o"
    DFLAGS="${DFLAGS} -DENABLE_STM8"
  ;;
  --enable-super-fx)
    ASM_OBJS="${ASM_OBJS} super_fx.o"
    DISASM_OBJS="${DISASM_OBJS} super_fx.o"
    TABLE_OBJS="${TABLE_OBJS} super_fx.o"
    DFLAGS="${DFLAGS} -DENABLE_SUPER_FX"
  ;;
  --enable-sweet16)
    ASM_OBJS="${ASM_OBJS} sweet16.o"
    DISASM_OBJS="${DISASM_OBJS} sweet16.o"
    TABLE_OBJS="${TABLE_OBJS} sweet16.o"
    DFLAGS="${DFLAGS} -DENABLE_SWEET16"
  ;;
  --enable-thumb)
    ASM_OBJS="${ASM_OBJS} thumb.o"
    DISASM_OBJS="${DISASM_OBJS} thumb.o"
    TABLE_OBJS="${TABLE_OBJS} thumb.o"
    DFLAGS="${DFLAGS} -DENABLE_THUMB"
  ;;
  --enable-tms340)
    ASM_OBJS="${ASM_OBJS} tms340.o"
    DISASM_OBJS="${DISASM_OBJS} tms340.o"
    TABLE_OBJS="${TABLE_OBJS} tms340.o"
    DFLAGS="${DFLAGS} -DENABLE_TMS340"
  ;;
  --enable-tms1000)
    ASM_OBJS="${ASM_OBJS} tms1000.o"
    DISASM_OBJS="${DISASM_OBJS} tms1000.o"
    TABLE_OBJS="${TABLE_OBJS} tms1000.o"
    DFLAGS="${DFLAGS} -DENABLE_TMS1000"
  ;;
  --enable-tms9900)
    ASM_OBJS="${ASM_OBJS} tms9900.o"
    DISASM_OBJS="${DISASM_OBJS} tms9900.o"
    SIM_OBJS="${SIM_OBJS} tms9900.o"
    TABLE_OBJS="${TABLE_OBJS} tms9900.o"
    DFLAGS="${DFLAGS} -DENABLE_TMS9900"
  ;;
  --enable-unsp)
    ASM_OBJS="${ASM_OBJS} unsp.o"
    DISASM_OBJS="${DISASM_OBJS} unsp.o"
    TABLE_OBJS="${TABLE_OBJS} unsp.o"
    DFLAGS="${DFLAGS} -DENABLE_UNSP"
  ;;
  --enable-webasm)
    ASM_OBJS="${ASM_OBJS} webasm.o"
    DISASM_OBJS="${DISASM_OBJS} webasm.o"
    TABLE_OBJS="${TABLE_OBJS} webasm.o"
    DFLAGS="${DFLAGS} -DENABLE_WEBASM"
  ;;
  --enable-xtensa)
    ASM_OBJS="${ASM_OBJS} xtensa.o"
    DISASM_OBJS="${DISASM_OBJS} xtensa.o"
    TABLE_OBJS="${TABLE_OBJS} xtensa.o"
    DFLAGS="${DFLAGS} -DENABLE_XTENSA"
  ;;
  --enable-z80)
    ASM_OBJS="${ASM_OBJS} z80.o"
    DISASM_OBJS="${DISASM_OBJS} z80.o"
    SIM_OBJS="${SIM_OBJS} z80.o"
    TABLE_OBJS="${TABLE_OBJS} z80.o"
    DFLAGS="${DFLAGS} -DENABLE_Z80"
  ;;
  esac
done

if [ -e /usr/local/include/readline ]
then
  CFLAGS="${CFLAGS} -I/usr/local/include/readline"
fi

if [ "${ASM_OBJS}" == "common.o" ]
then
  ASM_OBJS="${ASM_OBJS_ALL}"
  DISASM_OBJS="${DISASM_OBJS_ALL}"
  SIM_OBJS="${SIM_OBJS_ALL}"
  TABLE_OBJS="${TABLE_OBJS_ALL}"
  DFLAGS="${DFLAGS_ALL}"
  NO_MSP430=""
fi

if test_compiler "gcc"
then
  CC="gcc"
elif test_compiler "cc"
then
  CC="cc"
fi

#if test_lib "-lws2_32"; then LDFLAGS="${LDFLAGS} -lws2_32"; fi
#if test_lib "-lwinmm"; then LDFLAGS="${LDFLAGS} -lwinmm"; fi
#if test_lib "-luser32"; then LDFLAGS="${LDFLAGS} -luser32"; fi
if test_lib "-lreadline"
then
  if test_include "readline/readline.h"
  then
    LDFLAGS_UTIL="${LDFLAGS_UTIL} -lreadline"
    CFLAGS="${CFLAGS} -DREADLINE"
  fi
fi

if [ "${DEBUG}" = "" ]
then
  CFLAGS="${CFLAGS} -O3"
else
  CFLAGS="${CFLAGS} ${DEBUG}"
fi

if [ "${NO_MSP430}" != "" ]
then
  CFLAGS="${CFLAGS} ${NO_MSP430}"
fi

#if ! instr "WINDOWS" "${FLAGS}"
#then
#  a=`${COMPILER_PREFIX}${CC} --version`
#
#  if instr "mingw" "${a}"
#  then
#    FLAGS="${FLAGS} -DWINDOWS -mwindows"
#    CONFIG_EXT=".exe"
#  fi
#fi

if instr "mingw" "${COMPILER_PREFIX}"
then
  CONFIG_EXT=".exe"
fi

if ! instr "WINDOWS" "${CFLAGS}"
then
  if [ "${INSTALL_PREFIX}" = "" ]
  then
    INSTALL_PREFIX="."
  fi

  INSTALL_BIN=${INSTALL_PREFIX}/bin
  INSTALL_INCLUDES=${INSTALL_PREFIX}/share/naken_asm
else
  INSTALL_BIN=${INSTALL_PREFIX}
  INSTALL_INCLUDES=${INSTALL_PREFIX}
fi

if [ "${INCLUDE_PATH}" = "" ]
then
  INCLUDE_PATH="${INSTALL_INCLUDES}/include"
fi

test_strip

cleanup

echo "# Generated include file" > config.mak
echo "# $0 $*" >> config.mak
echo >> config.mak
echo "CC=${COMPILER_PREFIX}${CC}" >> config.mak
echo "COMPILER_PREFIX=${COMPILER_PREFIX}" >> config.mak
echo "LDFLAGS=${LDFLAGS}" >> config.mak
echo "LDFLAGS_UTIL=${LDFLAGS_UTIL}" >> config.mak
echo "CFLAGS=${CFLAGS}" >> config.mak
echo "DFLAGS=${DFLAGS}" >> config.mak
echo "INSTALL_BIN=${INSTALL_BIN}" >> config.mak
echo "INSTALL_INCLUDES=${INSTALL_INCLUDES}" >> config.mak
echo "INSTALL_PREFIX=${INSTALL_PREFIX}" >> config.mak
echo "INCLUDE_PATH=${INCLUDE_PATH}" >> config.mak
echo "CONFIG_EXT=${CONFIG_EXT}" >> config.mak
#echo "ASM_OBJS=${ASM_OBJS}" >> config.mak
#echo "DISASM_OBJS=${DISASM_OBJS}" >> config.mak
#echo "COMMON_OBJS=${COMMON_OBJS}" >> config.mak
#echo "TABLE_OBJS=${TABLE_OBJS}" >> config.mak
#echo "SIM_OBJS=${SIM_OBJS}" >> config.mak
#echo "PROG_OBJS=${PROG_OBJS}" >> config.mak
output_objs ASM_OBJS asm "${ASM_OBJS}"
output_objs DISASM_OBJS disasm "${DISASM_OBJS}"
output_objs TABLE_OBJS table "${TABLE_OBJS}"
output_objs COMMON_OBJS common "${COMMON_OBJS}"
output_objs SIM_OBJS simulate "${SIM_OBJS}"
output_objs FILEIO_OBJS fileio "${FILEIO_OBJS}"
output_objs PROG_OBJS prog "${PROG_OBJS}"
echo >> config.mak

echo
echo "Configuration:"
echo "  Install to: ${INSTALL_PREFIX}"
echo "            : ${INSTALL_BIN}, ${INSTALL_INCLUDES}/include"
echo "    Compiler: ${COMPILER_PREFIX}${CC}"
echo "     LDFLAGS: ${LDFLAGS}"
echo "UTIL LDFLAGS: ${LDFLAGS_UTIL}"
echo "      CFLAGS: ${CFLAGS}"
echo "     DEFINES: ${DFLAGS}"
echo "INCLUDE_PATH: ${INCLUDE_PATH}"
echo "        BINS: naken_asm${CONFIG_EXT}, naken_util${CONFIG_EXT}, naken_prog${CONFIG_EXT}"
echo
echo "Now type: make"
echo
